<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: deploying | pfigue]]></title>
  <link href="http://pfigue.github.io/blog/categories/deploying/atom.xml" rel="self"/>
  <link href="http://pfigue.github.io/"/>
  <updated>2013-11-28T17:00:48+01:00</updated>
  <id>http://pfigue.github.io/</id>
  <author>
    <name><![CDATA[pfigue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Deploying static pages]]></title>
    <link href="http://pfigue.github.io/blog/2013/08/19/deploying-static-pages/"/>
    <updated>2013-08-19T19:16:00+02:00</updated>
    <id>http://pfigue.github.io/blog/2013/08/19/deploying-static-pages</id>
    <content type="html"><![CDATA[<p>A external designer prepares some static pages as landing pages for a platform.</p>

<ul>
<li>They are stored in a github repository.</li>
<li>We should provide a comfortable way of deploying them to production.</li>
<li>Obviously, the external desginer is not allowed to access the production environment.</li>
</ul>


<p>Solution:</p>

<ul>
<li>we will provide github access to the repository, so the desginer will push/pull directly to github the change she does.</li>
<li>we will write a deployment script to fetch the last changes from github and put them in production</li>
</ul>


<h2>The deployment script</h2>

<p>Something very easy in shell script: fetch the last changes, clean the filetree and copy it to production</p>

<pre><code>#!/bin/bash

GIT_COPY=/opt/acme/repo-static-pages/
TARGET=/usr/share/nginx/www/
TMP_DIR=/tmp/repo-static-pages/


### Update local copy
pushd $GIT_COPY &gt; /dev/null
git fetch upstream
git checkout master
git pull upstream master
popd &gt; /dev/null

### Put to a temporary location and clean it
rm -rf $TMP_DIR
mkdir -p $TMP_DIR
cp -r $GIT_COPY* $TMP_DIR
find $TMP_DIR -iname ".git" -type d -exec rm -rf {} \;
find $TMP_DIR -iname "*.tar.gz" -type f -delete
find $TMP_DIR -iname "*.tar" -type f -delete

### Deploy
rm -rf $TARGET
mkdir $TARGET
cp -r $TMP_DIR* $TARGET

rm -rf $TMP_DIR 
</code></pre>

<p>Note that it will deploy the <em>master</em> branch.</p>

<p>Also, we have to prepare the environment:</p>

<ul>
<li>Create SSH keys that will be used as <strong>deployment keys</strong> for the repository: <code>ssh-keygen -t rsa</code>

<ul>
<li> Without password to be able to automatise the process.</li>
<li> Or with password and store the unencrypted key in an SSH keyring.</li>
</ul>
</li>
<li><code>mkdir -p /opt/acme/repo-static-pages/</code></li>
<li><code>git clone git@github.com:acme/repo-static-pages.git /opt/acme/repo-static-pages/</code></li>
<li><code>git remote add upstream git@github.com:acme/repo-static-pages.git</code></li>
</ul>


<p>Note that the <em>upstream</em> should use the SSH endpoint instead the HTTPS one, to be able to authentify via the <em>deployment key</em>.</p>

<h2>Deploying</h2>

<p>Alternatives:</p>

<ul>
<li>deploy manually on demand, but I would prefer to spend the time in something more interesting</li>
<li>Install a cronjob that weekly, daily or every 5 minutes will deploy the last changes in github.</li>
<li>Use a githook that will run the deployment when a Pull Request is merged into the master branch of the repo.</li>
</ul>


<p>In any case, we have to be sure that no several deployments are running concurrently.</p>
]]></content>
  </entry>
  
</feed>
