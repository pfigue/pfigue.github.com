<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sysadmin | pfigue]]></title>
  <link href="http://pfigue.github.io/blog/categories/sysadmin/atom.xml" rel="self"/>
  <link href="http://pfigue.github.io/"/>
  <updated>2014-02-04T10:11:51+01:00</updated>
  <id>http://pfigue.github.io/</id>
  <author>
    <name><![CDATA[pfigue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Configuring dnsmasq to serve my own domain name zone]]></title>
    <link href="http://pfigue.github.io/blog/2013/12/06/configuring-dnsmasq-to-serve-my-own-domain-name-zone/"/>
    <updated>2013-12-06T17:07:00+01:00</updated>
    <id>http://pfigue.github.io/blog/2013/12/06/configuring-dnsmasq-to-serve-my-own-domain-name-zone</id>
    <content type="html"><![CDATA[<h1>Why a name server and why dnsmasq.</h1>

<p>I have a datacenter (Acme GmbH.), with several environments (green, blue, live, staging), each environment with several servers (server1, server2, &hellip; serverX) and I want to use a domain name service to name every server on the datacenter, so every server can easily know what is the IP of server3.staging.acme, for example.</p>

<p>I may want also to create some aliases like puppet-master.acme.</p>

<p>While I could do this with BIND, it actually seems easier to me to user <em>dnsmasq</em>.</p>

<p>dnsmasq is a small DNS server easy to configure. It has also DHCP integration (and TFTP, PXE, etc.) but it is not what I am looking for.</p>

<p>As alternatives to use my own DNS server, I could choose some setup with Route 53 as user of Amazon. Digital Ocean or other providers may have their own systems.</p>

<h1>Installing</h1>

<p>In Ubuntu 12.04 it is just <code>sudo apt-get install dnsmasq</code>. It will launch the service, that you can stop via <code>/etc/init.d/dnsmasq stop</code>.</p>

<p>The configuration file is in <code>/etc/dnsmasq.conf</code>. The files in <code>/etc/dnsmasq.d/</code> can be included from dnsmasq.conf, but per default they aren&rsquo;t.</p>

<h1>Testing and finding the right configuration</h1>

<p>The <em>&mdash;no-daemon</em> option will be useful to do test in the command line:</p>

<pre><code>/usr/sbin/dnsmasq --no-daemon
</code></pre>

<p><em>&mdash;no-hosts</em> and <em>&mdash;addn-hosts=/etc/hosts.acme</em> will prevent dnsmasq to read /etc/hosts and instead load the datacenter zone configuration from <code>/etc/hosts.acme</code>:</p>

<pre><code>/usr/sbin/dnsmasq --no-daemon --no-hosts --addn-hosts=/etc/hosts.acme
</code></pre>

<p><em>&mdash;interface=eth0</em> will force dnsmasq to listen only on that interface. In my case, this will run in an AWS EC2 Instance, so I can configure in the Amazon Web Console the Security Groups to firewall the service and let only the legit servers to access the zone entries instead of everybody in the Amazon Datacenter network.</p>

<p><em>&mdash;no-resolv</em> will avoid dnsmasq to read the list of name servers from <code>/etc/resolv.conf</code> and <em>&mdash;server=&ldquo;8.8.4.4&rdquo;</em> will provide a default one, in this case a Google nameserver</p>

<pre><code>/usr/sbin/dnsmasq --no-daemon --no-hosts --addn-hosts=/etc/hosts.acme --interface=eth0 --no-resolv --server="8.8.4.4"
</code></pre>

<h1>Setting up the DNS server</h1>

<p>Instead of launching the command manually, we will launch the service via <code>/etc/init.d/dnsmasq start|status|stop</code>. The default configuration is <code>/etc/dnsmasq.conf</code> and I have this there:</p>

<pre><code>no-resolv
server=8.8.4.4
server=8.8.8.8
interface=eth0
no-dhcp-interface=eth0
no-hosts
addn-hosts=/etc/hosts.acme
log-queries
log-dhcp
</code></pre>

<p>The <strong>user</strong> and <strong>group</strong> directives are not needed in Ubuntu, as the server is run always ad <strong>dnsmasq</strong> user. Only during testing we will use <strong>log-queries</strong> and <strong>log-dhcp</strong>, to see what is going on. Once finished the tests, we can remove them.</p>

<p>In <code>/etc/hosts.acme</code> just 1 entry (if you are copying tis, be sure of using a valid IP address, with numbers, not that z.z.z.z):</p>

<pre><code>z.z.z.z     server2.staging.acme
</code></pre>

<p>If I launch the service like <code>/usr/sbin/dnsmasq -C /etc/dnsmasq.conf --no-daemon</code> (as root) I get this:</p>

<pre><code>dnsmasq: started, version 2.59 cachesize 150
dnsmasq: compile time options: IPv6 GNU-getopt DBus i18n DHCP TFTP conntrack IDN
dnsmasq: using nameserver 8.8.8.8#53
dnsmasq: using nameserver 8.8.4.4#53
dnsmasq: read /etc/hosts.acme - 1 addresses
</code></pre>

<p>Then, from other server (IP: y.y.y.y) with access to port 53/udp of the server (name: server1.acme, IP: x.x.x.x) where dnsmasq is running, I do:</p>

<pre><code># dig @server1.acme www.google.de

; &lt;&lt;&gt;&gt; DiG 9.8.1-P1 &lt;&lt;&gt;&gt; @server1.acme www.google.de
; (1 server found)
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 43199
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0

;; QUESTION SECTION:
;www.google.de.                 IN      A

;; ANSWER SECTION:
www.google.de.          300     IN      A       74.125.24.94

;; Query time: 21 msec
;; SERVER: x.x.x.x#53(x.x.x.x)
;; WHEN: Tue Dec  3 16:35:58 2013
;; MSG SIZE  rcvd: 47
</code></pre>

<p>It seems the name server can resolve external domain names. And actually I see in the server:</p>

<pre><code>dnsmasq: query[A] www.google.de from y.y.y.y
dnsmasq: forwarded www.google.de to 8.8.4.4
dnsmasq: forwarded www.google.de to 8.8.8.8
dnsmasq: reply www.google.de is 74.125.24.94
</code></pre>

<p>So, it seems to be forwarding my requests to google&rsquo;s DNSs (8.8.4.4 and 8.8.8.8) as they are not in the cache of dnsmasq.</p>

<p>If I ask again (2 seconds later) for the same external name:</p>

<pre><code>dig @server1.acme www.google.de

; &lt;&lt;&gt;&gt; DiG 9.8.1-P1 &lt;&lt;&gt;&gt; @server1.acme www.google.de
; (1 server found)
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 36570
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0

;; QUESTION SECTION:
;www.google.de.                 IN      A

;; ANSWER SECTION:
www.google.de.          298     IN      A       74.125.24.94

;; Query time: 2 msec
;; SERVER: x.x.x.x#53(x.x.x.x)
;; WHEN: Tue Dec  3 16:36:00 2013
;; MSG SIZE  rcvd: 47
</code></pre>

<p>The answer I get has a TTL 2 seconds lower and in the server I see:</p>

<pre><code>dnsmasq: query[A] www.google.de from y.y.y.y
dnsmasq: cached www.google.de is 74.125.24.94
</code></pre>

<p>This time dnsmasq had the answer itself and didn&rsquo;t need to forward. In fact the query time went from 21msec to 2msec.</p>

<p>If I ask for an internal name:</p>

<pre><code>dig @server1.acme server2.staging.acme

; &lt;&lt;&gt;&gt; DiG 9.8.1-P1 &lt;&lt;&gt;&gt; @server1.acme server2.staging.acme;
; (1 server found)
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 54617
;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0

;; QUESTION SECTION:
;server2.staging.acme.           IN      A

;; ANSWER SECTION:
server2.staging.acme.    0       IN      A       z.z.z.z

;; Query time: 2 msec
;; SERVER: x.x.x.x#53(x.x.x.x)
;; WHEN: Tue Dec  3 16:36:13 2013
;; MSG SIZE  rcvd: 53
</code></pre>

<p>I get this in the server:</p>

<pre><code>dnsmasq: query[A] server2.staging.acme from y.y.y.y
dnsmasq: /etc/hosts.acme server2.staging.acme is z.z.z.z
</code></pre>

<p>The server is also able to solve internal names.</p>

<h1>Automatising the installation with Puppet</h1>

<p>I have a <a href="https://gist.github.com/pfigue/7772289">Gist with an draft of a manifest</a> for Puppet.</p>

<p>Use <code>puppet apply --noop dnsmasq.pp</code> to check it (eventually w/o &mdash;noop).</p>

<h1>References:</h1>

<ul>
<li><a href="http://www.thekelleys.org.uk/dnsmasq/docs/dnsmasq-man.html">dnsmasq manual page</a></li>
<li><a href="http://en.wikipedia.org/wiki/Comparison_of_DNS_server_software">Comparison of DNS Server Software</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Replacing DHCP automatic name resolution config with my own static one]]></title>
    <link href="http://pfigue.github.io/blog/2013/12/04/replacing-dhcp-automatic-name-resolution-config-with-my-own-static-one/"/>
    <updated>2013-12-04T13:07:00+01:00</updated>
    <id>http://pfigue.github.io/blog/2013/12/04/replacing-dhcp-automatic-name-resolution-config-with-my-own-static-one</id>
    <content type="html"><![CDATA[<p><em>Problem1:</em> I have an AWS EC2 Instance (Ubuntu 12.04) where I want to use <a href="http://pfigue.github.io/blog/2013/12/06/configuring-dnsmasq-to-serve-my-own-domain-name-zone/">my own DNS service</a>, not the default one provided by Amazon.</p>

<p><em>Solution1:</em> Definining a static DNS server configuration</p>

<p>In <code>/etc/network/interfaces</code> you can specify <strong>dns-search</strong> and <strong>dns-nameservers</strong> in the configuration of the network interface,</p>

<pre><code># The primary network interface
auto eth0
iface eth0 inet dhcp
        dns-search acme
        dns-nameservers 1.2.3.4
</code></pre>

<p>Now if you apply this configuration with <code>/etc/init.d/networking restart</code>, you will be able to see changes in <code>/etc/resolv.conf</code>.</p>

<p><em>Note1:</em> Restarting the network services didn&rsquo;t disconnect me from the computer I was configuring.</p>

<p><em>Note2:</em> There may be better ways to apply changes in the network config.</p>

<p><em>Problem2:</em> In /etc/resolv.conf there is my static configuration <strong>together with the DNS setup received via DHCP</strong>, and I want only my configuration without the one provided by DHCP.</p>

<p><em>Solution2:</em> Avoid the DNS setup from DHCP.</p>

<p>My system is using dhclient3, and the config. file for it is in <code>/etc/dhcp/dhclient.conf</code>. There, I comment the options to retrieve the DNS config from the DHCP service:</p>

<pre><code>request subnet-mask, broadcast-address, time-offset, routers,
        #domain-name, domain-name-servers, domain-search, host-name,
        netbios-name-servers, netbios-scope, interface-mtu,
        rfc3442-classless-static-routes, ntp-servers,
</code></pre>

<p>Now if I restart the <code>networking</code> service again, <code>/etc/resolv.conf</code> will have the right domain and nameservers.</p>

<p>References:</p>

<ul>
<li><a href="http://ubuntuforums.org/showthread.php?t=1320773">Static DNS with DHCP</a></li>
<li><a href="https://help.ubuntu.com/12.04/serverguide/network-configuration.html#name-resolution">Ubuntu 12.04: Network Configuration: Name Resolution</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monitoring software]]></title>
    <link href="http://pfigue.github.io/blog/2013/09/21/monitoring-software/"/>
    <updated>2013-09-21T23:59:00+02:00</updated>
    <id>http://pfigue.github.io/blog/2013/09/21/monitoring-software</id>
    <content type="html"><![CDATA[<ul>
<li>Pandora FMS</li>
<li>Icinga/Nadios</li>
<li>Riemann</li>
<li>Splunk</li>
<li>Munin</li>
<li>Cacti</li>
<li>New Relic</li>
<li>Zabbix</li>
<li>OpenNMS</li>
<li>Ganglia</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adjusting the locale settings]]></title>
    <link href="http://pfigue.github.io/blog/2013/08/15/adjusting-the-locale-settings/"/>
    <updated>2013-08-15T15:48:00+02:00</updated>
    <id>http://pfigue.github.io/blog/2013/08/15/adjusting-the-locale-settings</id>
    <content type="html"><![CDATA[<p>This morning we had a problem at work. Our django webapp was raising an <strong>UnicodeError</strong> exception because it was trying to access a file, whose filename was written with ciryllic characters.</p>

<p>The behaviour of python with unicode depends on the system locale, which is defined by <em>environment variables</em> like <strong>LC_ALL</strong>, <strong>LANG</strong>, <strong>LC_TYPE</strong>, etc.</p>

<p>In this case, the solution of the problem was first, to use a locale with <strong>UTF-8</strong>. But actually, the Upstart task that launches the <em>uwsgi</em> for the django app is providing several environment variables. Among others, <em>LC_ALL</em> and <em>LANG</em>, which refer to <em>de_DE.UTF-8</em> locale.</p>

<p>Till here, everything is right. Then, why is it not working?</p>

<p>Well, because the locale needs to be installed. Or more exactly, it needs to be generated:</p>

<pre><code>$ locale-gen de_DE.UTF-8
</code></pre>

<p>Apparently, <code>dpkg-reconfigure locales</code> checks for the locales and compiles them if necesary. For some yet-unknown-for-me reason, that locale was not being compiled by <em>dpkg-reconfigure</em> till I ran <em>locale-gen</em>.</p>

<p>Once this locales was compiled we didn&rsquo;t even need to restart the uwsgis to fix the application, though we did, just in case.</p>

<p><em>UnicodeError</em> went away and we won a karma cookie for the happy DevOps Team.</p>

<h2>Setting the right locale for the command line</h2>

<p>One thing is the locale for the django app, defined in the environment variables the python interpreter gets to run the uwsgi (i.e. defined in the Upstart task).</p>

<p>And other thing is the command line the operators use to do their stuff on the system. This one should be in English, or operators will break. To achieve this, <strong>LANG=en_US.UTF-8</strong>, for example. And the right way is to define it in <code>/etc/environment</code>. I defined also <strong>LC_ALL</strong> with the same value.</p>

<p>Now when running <code>dpkg-reconfigure locales</code> I don&rsquo;t get anymore the warnings I was getting before due to the lack of <em>LANG</em> and <em>LC_ALL</em> definition.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Django administrative commands as cronjobs]]></title>
    <link href="http://pfigue.github.io/blog/2013/08/14/running-django-administrative-commands-as-cronjobs/"/>
    <updated>2013-08-14T18:17:00+02:00</updated>
    <id>http://pfigue.github.io/blog/2013/08/14/running-django-administrative-commands-as-cronjobs</id>
    <content type="html"><![CDATA[<p>My best practices (at the moment) to install periodic django administrative commands.</p>

<h1>Crontabs</h1>

<p>First of all, there are three crontabs:</p>

<ul>
<li> the system one (<em>/etc/crontab</em>)</li>
<li> and the user&rsquo;s one (<em>/var/spool/cron/crontabs/root</em>, e.g.).</li>
<li> those in <em>/etc/cron.d/</em>. Newly installed packages may want to install their cronjobs there.</li>
</ul>


<p>The syntax is different:</p>

<ul>
<li> in the system crontab (and /etc/cron.d) you indicate which user runs the cronjob.</li>
<li> while in the user&rsquo;s cronjob it is the user itself who runs the cronjobs.</li>
</ul>


<p>And the way to manipulate the files as well:</p>

<ul>
<li> system crontab is manipulated editing directly <em>/etc/crontab</em> or <em>/etc/cron.d/file</em>. Usually it is a script (like a <em>postinstall script</em> in a package) who updates it.</li>
<li><p> user&rsquo;s crontab is manipulated via the <code>crontab</code> command:</p>

<ul>
<li><code>crontab -e</code> to edit. <code>export EDITOR=/usr/bin/vim</code> may help, unles you like <em>nano</em>.</li>
<li>and <code>crontab -l</code> to list (piping to <em>less</em>, for example).</li>
</ul>
</li>
</ul>


<p>Note that the command <strong>checks the syntax of the crontab</strong>.</p>

<p>Where to put the cronjobs is up to you. In my case we were using the system crontab but we switched to root&rsquo;s crontab, as we were introducing the cronjobs manually and would like to have a syntax check, just in case.</p>

<h1>Wrapping for manage.py</h1>

<p>To make <strong>manage.py</strong> run you need to provide some <strong>environment variables</strong>. Some of them to activate the virtual environment of your python webapp, others maybe to provide configuration parameters for your webapp (database server, port, credentials, etc.). Also, the python interpreter you should use is the one in your virtualenv. Maybe a wrapper like this in <code>/root/tools/django_cronjobs_wrapper.sh</code> becomes handy:</p>

<pre><code>#!/bin/bash
# Wrapper to run cronjobs

if [ $# -eq 0 ]; then
    echo "usage: $0 {command for manage.py}"
    exit 1
fi

export SETTINGS_FILE='/etc/acme/webapp_settings.conf'
export PYTHONPATH='/opt/acme/webapp_env/'
export PYTHONHOME='/opt/acme/webapp_env'
$PYTHONHOME/bin/python /opt/acme/webapp/code/manage.py $*
</code></pre>

<p>The return value is the one of the manage.py command (useful for cron to know if it failed). <em>Stderr</em> and <em>stdout</em> are not redirected anywhere at the moment.</p>

<p>Indeed, you can extend this wrapper to run <strong>manage.py commands</strong> in the shell, for example a <strong>shell_plus session</strong>, or run a <strong>celery consumer</strong> from <em>Upstart</em> or <em>Supervisor</em>.</p>

<p>Note: I had to change the group of the file to <em>crontab</em> and give it exec. permission:</p>

<pre><code>-rwxr-xr-- 1 root crontab 1055 Aug 7 18:00 tools/django_cronjobs_wrapper.sh
</code></pre>

<h1>Installing the cronjob</h1>

<p>For example:</p>

<pre><code>5 * * * * /root/tools/django_cronjobs_wrapper.sh a_csv_export --for --example &gt;&gt; /var/log/acme/cronjobs/a_csv_export.log
</code></pre>

<p>This would be for a user&rsquo;s crontab. Note that <strong>stdout</strong> goes to a logfile, appending lines, so you will have logs for all the executions (but be careful with the log size!)</p>

<p><strong>stderr</strong> is captured by cron, who will send an email if there were messages.</p>

<p>In case the django command (and all the stuff behind) is properly programmed you will get only emails when there are errors during the cronjob execution (e.g. lack of disk space while writing the CSV file, which will trigger an IOError exception).</p>

<h1>Having a collection of cronjobs</h1>

<p>You may want to keep the crontabs in a repo. Or in a <strong>chef recipe</strong>. Or deploy them in a package (if you deploy the rest of your software with packages).</p>

<p>Some other peopler prefer to use Celery Periodic Tasks, which means that the periodic tasks are configured in the software, instead of using the system configuration.</p>
]]></content>
  </entry>
  
</feed>
